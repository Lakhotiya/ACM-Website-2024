import "./chunk-EWTE5DHJ.js";

// node_modules/spin.js/spin.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var defaults = {
  lines: 12,
  length: 7,
  width: 5,
  radius: 10,
  scale: 1,
  corners: 1,
  color: "#000",
  fadeColor: "transparent",
  animation: "spinner-line-fade-default",
  rotate: 0,
  direction: 1,
  speed: 1,
  zIndex: 2e9,
  className: "spinner",
  top: "50%",
  left: "50%",
  shadow: "0 0 1px transparent",
  // prevent aliased lines
  position: "absolute"
};
var Spinner = (
  /** @class */
  function() {
    function Spinner2(opts) {
      if (opts === void 0) {
        opts = {};
      }
      this.opts = __assign(__assign({}, defaults), opts);
    }
    Spinner2.prototype.spin = function(target) {
      this.stop();
      this.el = document.createElement("div");
      this.el.className = this.opts.className;
      this.el.setAttribute("role", "progressbar");
      this.el.style.position = this.opts.position;
      this.el.style.width = "0";
      this.el.style.zIndex = this.opts.zIndex.toString();
      this.el.style.left = this.opts.left;
      this.el.style.top = this.opts.top;
      this.el.style.transform = "scale(".concat(this.opts.scale, ")");
      if (target) {
        target.insertBefore(this.el, target.firstChild || null);
      }
      drawLines(this.el, this.opts);
      return this;
    };
    Spinner2.prototype.stop = function() {
      if (this.el) {
        if (this.el.parentNode) {
          this.el.parentNode.removeChild(this.el);
        }
        this.el = void 0;
      }
      return this;
    };
    return Spinner2;
  }()
);
function getColor(color, idx) {
  return typeof color == "string" ? color : color[idx % color.length];
}
function drawLines(el, opts) {
  var borderRadius = Math.round(opts.corners * opts.width * 500) / 1e3 + "px";
  var shadow = "none";
  if (opts.shadow === true) {
    shadow = "0 2px 4px #000";
  } else if (typeof opts.shadow === "string") {
    shadow = opts.shadow;
  }
  var shadows = parseBoxShadow(shadow);
  for (var i = 0; i < opts.lines; i++) {
    var degrees = ~~(360 / opts.lines * i + opts.rotate);
    var backgroundLine = document.createElement("div");
    backgroundLine.style.position = "absolute";
    backgroundLine.style.top = "".concat(-opts.width / 2, "px");
    backgroundLine.style.width = opts.length + opts.width + "px";
    backgroundLine.style.height = opts.width + "px";
    backgroundLine.style.background = getColor(opts.fadeColor, i);
    backgroundLine.style.borderRadius = borderRadius;
    backgroundLine.style.transformOrigin = "left";
    backgroundLine.style.transform = "rotate(".concat(degrees, "deg) translateX(").concat(opts.radius, "px)");
    var delay = i * opts.direction / opts.lines / opts.speed;
    delay -= 1 / opts.speed;
    var line = document.createElement("div");
    line.style.width = "100%";
    line.style.height = "100%";
    line.style.background = getColor(opts.color, i);
    line.style.borderRadius = borderRadius;
    line.style.boxShadow = normalizeShadow(shadows, degrees);
    line.style.animation = "".concat(1 / opts.speed, "s linear ").concat(delay, "s infinite ").concat(opts.animation);
    backgroundLine.appendChild(line);
    el.appendChild(backgroundLine);
  }
}
function parseBoxShadow(boxShadow) {
  var regex = /^\s*([a-zA-Z]+\s+)?(-?\d+(\.\d+)?)([a-zA-Z]*)\s+(-?\d+(\.\d+)?)([a-zA-Z]*)(.*)$/;
  var shadows = [];
  for (var _i = 0, _a = boxShadow.split(","); _i < _a.length; _i++) {
    var shadow = _a[_i];
    var matches = shadow.match(regex);
    if (matches === null) {
      continue;
    }
    var x = +matches[2];
    var y = +matches[5];
    var xUnits = matches[4];
    var yUnits = matches[7];
    if (x === 0 && !xUnits) {
      xUnits = yUnits;
    }
    if (y === 0 && !yUnits) {
      yUnits = xUnits;
    }
    if (xUnits !== yUnits) {
      continue;
    }
    shadows.push({
      prefix: matches[1] || "",
      // could have value of 'inset' or undefined
      x,
      y,
      xUnits,
      yUnits,
      end: matches[8]
    });
  }
  return shadows;
}
function normalizeShadow(shadows, degrees) {
  var normalized = [];
  for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {
    var shadow = shadows_1[_i];
    var xy = convertOffset(shadow.x, shadow.y, degrees);
    normalized.push(shadow.prefix + xy[0] + shadow.xUnits + " " + xy[1] + shadow.yUnits + shadow.end);
  }
  return normalized.join(", ");
}
function convertOffset(x, y, degrees) {
  var radians = degrees * Math.PI / 180;
  var sin = Math.sin(radians);
  var cos = Math.cos(radians);
  return [
    Math.round((x * cos + y * sin) * 1e3) / 1e3,
    Math.round((-x * sin + y * cos) * 1e3) / 1e3
  ];
}

// node_modules/ladda/js/ladda.js
var ALL_INSTANCES = [];
function create(button) {
  if (typeof button === "undefined") {
    console.warn("Ladda button target must be defined.");
    return;
  }
  if (!button.classList.contains("ladda-button")) {
    button.classList.add("ladda-button");
  }
  if (!button.hasAttribute("data-style")) {
    button.setAttribute("data-style", "expand-right");
  }
  if (!button.querySelector(".ladda-label")) {
    var laddaLabel = document.createElement("span");
    laddaLabel.className = "ladda-label";
    wrapContent(button, laddaLabel);
  }
  var spinnerWrapper = button.querySelector(".ladda-spinner");
  if (!spinnerWrapper) {
    spinnerWrapper = document.createElement("span");
    spinnerWrapper.className = "ladda-spinner";
  }
  button.appendChild(spinnerWrapper);
  var timer;
  var spinner;
  var instance = {
    /**
     * Enter the loading state.
     */
    start: function() {
      if (!spinner) {
        spinner = createSpinner(button);
      }
      button.disabled = true;
      button.setAttribute("data-loading", "");
      clearTimeout(timer);
      spinner.spin(spinnerWrapper);
      this.setProgress(0);
      return this;
    },
    /**
     * Enter the loading state, after a delay.
     */
    startAfter: function(delay) {
      clearTimeout(timer);
      timer = setTimeout(function() {
        instance.start();
      }, delay);
      return this;
    },
    /**
     * Exit the loading state.
     */
    stop: function() {
      if (instance.isLoading()) {
        button.disabled = false;
        button.removeAttribute("data-loading");
      }
      clearTimeout(timer);
      if (spinner) {
        timer = setTimeout(function() {
          spinner.stop();
        }, 1e3);
      }
      return this;
    },
    /**
     * Toggle the loading state on/off.
     */
    toggle: function() {
      return this.isLoading() ? this.stop() : this.start();
    },
    /**
     * Sets the width of the visual progress bar inside of
     * this Ladda button
     *
     * @param {number} progress in the range of 0-1
     */
    setProgress: function(progress) {
      progress = Math.max(Math.min(progress, 1), 0);
      var progressElement = button.querySelector(".ladda-progress");
      if (progress === 0 && progressElement && progressElement.parentNode) {
        progressElement.parentNode.removeChild(progressElement);
      } else {
        if (!progressElement) {
          progressElement = document.createElement("div");
          progressElement.className = "ladda-progress";
          button.appendChild(progressElement);
        }
        progressElement.style.width = (progress || 0) * button.offsetWidth + "px";
      }
    },
    isLoading: function() {
      return button.hasAttribute("data-loading");
    },
    remove: function() {
      clearTimeout(timer);
      button.disabled = false;
      button.removeAttribute("data-loading");
      if (spinner) {
        spinner.stop();
        spinner = null;
      }
      ALL_INSTANCES.splice(ALL_INSTANCES.indexOf(instance), 1);
    }
  };
  ALL_INSTANCES.push(instance);
  return instance;
}
function bind(target, options) {
  var targets;
  if (typeof target === "string") {
    targets = document.querySelectorAll(target);
  } else if (typeof target === "object") {
    targets = [target];
  } else {
    throw new Error("target must be string or object");
  }
  options = options || {};
  for (var i = 0; i < targets.length; i++) {
    bindElement(targets[i], options);
  }
}
function stopAll() {
  for (var i = 0, len = ALL_INSTANCES.length; i < len; i++) {
    ALL_INSTANCES[i].stop();
  }
}
function getAncestorOfTagType(elem, type) {
  while (elem.parentNode && elem.tagName !== type) {
    elem = elem.parentNode;
  }
  return type === elem.tagName ? elem : void 0;
}
function createSpinner(button) {
  var height = button.offsetHeight, spinnerColor, spinnerLines;
  if (height === 0) {
    height = parseFloat(window.getComputedStyle(button).height);
  }
  if (height > 32) {
    height *= 0.8;
  }
  if (button.hasAttribute("data-spinner-size")) {
    height = parseInt(button.getAttribute("data-spinner-size"), 10);
  }
  if (button.hasAttribute("data-spinner-color")) {
    spinnerColor = button.getAttribute("data-spinner-color");
  }
  if (button.hasAttribute("data-spinner-lines")) {
    spinnerLines = parseInt(button.getAttribute("data-spinner-lines"), 10);
  }
  var radius = height * 0.2, length = radius * 0.6, width = radius < 7 ? 2 : 3;
  return new Spinner({
    color: spinnerColor || "#fff",
    lines: spinnerLines || 12,
    radius,
    length,
    width,
    animation: "ladda-spinner-line-fade",
    zIndex: "auto",
    top: "auto",
    left: "auto",
    className: ""
  });
}
function wrapContent(node, wrapper) {
  var r = document.createRange();
  r.selectNodeContents(node);
  r.surroundContents(wrapper);
  node.appendChild(wrapper);
}
function bindElement(element, options) {
  if (typeof element.addEventListener !== "function") {
    return;
  }
  var instance = create(element);
  var timeout = -1;
  element.addEventListener("click", function() {
    var valid = true;
    var form = getAncestorOfTagType(element, "FORM");
    if (typeof form !== "undefined" && !form.hasAttribute("novalidate")) {
      if (typeof form.checkValidity === "function") {
        valid = form.checkValidity();
      }
    }
    if (valid) {
      instance.startAfter(1);
      if (typeof options.timeout === "number") {
        clearTimeout(timeout);
        timeout = setTimeout(instance.stop, options.timeout);
      }
      if (typeof options.callback === "function") {
        options.callback.apply(null, [instance]);
      }
    }
  }, false);
}
export {
  bind,
  create,
  stopAll
};
/*! Bundled license information:

ladda/js/ladda.js:
  (*!
   * Ladda
   * http://lab.hakim.se/ladda
   * MIT licensed
   *
   * Copyright (C) 2018 Hakim El Hattab, http://hakim.se
   *)
*/
//# sourceMappingURL=ladda.js.map
